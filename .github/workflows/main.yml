name: CI/CD Pipeline to build, push to ECR and deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    outputs:
      ecr_repo_url: ${{ env.ECR_REPO_URL }}
      image_tag: ${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPO_NAME=my-app
          ECR_REPO_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}"
          echo "ECR_REPO_URL=${ECR_REPO_URL}" >> $GITHUB_ENV
          
          # Debug output
          echo "Setting ECR Repository URL: ${ECR_REPO_URL}"

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${ECR_REPO_URL}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm ci

      - name: Build and tag Docker image
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          
          # Debug output
          echo "Setting Image Tag: ${IMAGE_TAG}"
          
          docker build -t ${ECR_REPO_URL}:${IMAGE_TAG} .
          docker tag ${ECR_REPO_URL}:${IMAGE_TAG} ${ECR_REPO_URL}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${ECR_REPO_URL}:${IMAGE_TAG}
          docker push ${ECR_REPO_URL}:latest

  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
    steps:
      - name: Configure AWS credentials
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ECR pull secret
        run: |
          # Get ECR registry URL
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          
          # Create or update the secret
          kubectl delete secret ecr-secret --namespace=${KUBE_NAMESPACE} --ignore-not-found
          kubectl create secret docker-registry ecr-secret \
            --namespace=${KUBE_NAMESPACE} \
            --docker-server=${ECR_REGISTRY} \
            --docker-username=AWS \
            --docker-password="$(aws ecr get-login-password --region ${AWS_REGION})"

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: "${{ needs.build-and-push.outputs.ecr_repo_url }}"
          IMAGE_TAG: "${{ needs.build-and-push.outputs.image_tag }}"
        run: |
          # Debug ECR URL and image tag
          echo "ECR Registry: ${ECR_REGISTRY}"
          echo "Image Tag: ${IMAGE_TAG}"
          
          # Create the full image URL
          FULL_IMAGE_URL="${ECR_REGISTRY}:${IMAGE_TAG}"
          echo "Full Image URL: ${FULL_IMAGE_URL}"
          
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: my-app
            namespace: ${KUBE_NAMESPACE}
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: my-app
            template:
              metadata:
                labels:
                  app: my-app
              spec:
                imagePullSecrets:
                - name: ecr-secret
                containers:
                - name: my-app
                  image: "${FULL_IMAGE_URL}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 3000
                  envFrom:
                  - secretRef:
                      name: app-secrets
                  resources:
                    requests:
                      cpu: "500m"
                      memory: "2GB"
                    limits:
                      cpu: "1000m"
                      memory: "3GB"
          EOF
          
          # Verify the deployment
          kubectl get deployment my-app -n ${KUBE_NAMESPACE} -o wide
